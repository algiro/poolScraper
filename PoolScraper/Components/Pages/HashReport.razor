@page "/hashReport"
@using CommonUtils.Utils
@using PoolScraper.Components.Shared
@using PoolScraper.Domain
@using PoolScraper.Model
@using PoolScraper.Model.Scheduler
@using PoolScraper.Service
@using PoolScraper.Service.Consolidation
@using PoolScraper.View
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IWorkersReportService WorkerReportService
@inject IScrapingServiceClient ScrapingServiceClient

<PageTitle>Hashrate Info</PageTitle>

<h1>Uptime Report</h1>

<p>HashReport:</p>

<div class="col-12 col-sm-12">
    <DatePeriod OnSearch="@GetDetails" />
</div>

<Modal @ref="modal" title="Line Chart Graph" Fullscreen="ModalFullscreen.Always">
	<WorkersGraph/>
</Modal>
@if (snapshotWorkers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Tabs>
        <Tab Title="Workers" Active="true">
            <Content>
                <span> Workers Count: </span> <span> @snapshotWorkersPerWorker.Count()  </span>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Model</th>
                            <th>Algo</th>
                            <th>FarmId</th>
                            <th>Hashrate</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var snapshotWorker in snapshotWorkersPerWorker)
                        {
                            <tr>
                                <td>@snapshotWorker.Worker.Name</td>
                                <td>@snapshotWorker.Worker.Model.Name</td>
                                <td>@snapshotWorker.Worker.Algorithm</td>
                                <td>@snapshotWorker.Worker.Farm.Id</td>
                                <td>@snapshotWorker.BasicInfo.Hashrate</td>
                                <td> <Button Color="ButtonColor.Primary" @onclick="() => ShowGraph(snapshotWorker)">Graph</Button> </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </Content>
        </Tab>
        <Tab Title="Models">
            <Content>

                <span> Model Count: </span> <span> @snapshotWorkersPerModel.Count()  </span> <span> <Button Color="ButtonColor.Primary" @onclick="() => ShowModelGraph()"> Graph </Button> </span>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Model</th>
                            <th>Algo</th>
                            <th>Hashrate</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var snapshotWorker in snapshotWorkersPerModel)
                        {
                            <tr>
                                <td>@snapshotWorker.Worker.Model.Name</td>
                                <td>@snapshotWorker.Worker.Algorithm</td>
                                <td>@snapshotWorker.BasicInfo.Hashrate</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Content>
	    </Tab>

    </Tabs>
}

@code {
    private Modal modal = default!;
    private IEnumerable<ISnapshotDetailedView> snapshotWorkers = Enumerable.Empty<ISnapshotDetailedView>();
    private IEnumerable<ISnapshotDetailedView> snapshotWorkersPerWorker = Enumerable.Empty<ISnapshotDetailedView>();
    private IEnumerable<ISnapshotDetailedView> snapshotWorkersPerModel = Enumerable.Empty<ISnapshotDetailedView>();
    private IDateRange dateRange;
	private WorkersReport workersReport = new WorkersReport();
    protected override async Task OnInitializedAsync()
    {
        dateRange = DateOnly.FromDateTime(DateTime.Now.AddDays(-1)).AsDateRange();
        await GetDetails(dateRange);
    }

    private async Task GetDetails(IDateRange dateRange)
    {
        snapshotWorkers = (await WorkerReportService.GetSnapshotDetailedViewsAsync(dateRange)).OrderBy(w => w.Worker.Model.Name);
        snapshotWorkersPerWorker = workersReport.CalculateAveragePerWorker(snapshotWorkers);
        snapshotWorkersPerModel = workersReport.CalculateAveragePerModel(snapshotWorkers);

		StateHasChanged();
	}
    private async Task ShowGraph(ISnapshotDetailedView snapshotDetailedView)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("workersData", snapshotWorkers.Where(s => s.WorkerId == snapshotDetailedView.WorkerId));
        await modal.ShowAsync<WorkersGraph>(title: "Worker Graph", parameters: parameters);
    }

    private async Task ShowModelGraph()
    {
        var modelAndDate = workersReport.CalculateAveragePerModelAndDate(snapshotWorkers);
        var parameters = new Dictionary<string, object>();       
        parameters.Add("workersModelData", modelAndDate);
        await modal.ShowAsync<WorkersModelGraph>(title: "Worker Graph", parameters: parameters);
    }
}
