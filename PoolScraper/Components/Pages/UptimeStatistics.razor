@page "/uptimeStats"
@using PoolScraper.Components.Shared
@using PoolScraper.Domain
@using PoolScraper.Model
@using PoolScraper.Model.Scheduler
@using PoolScraper.Service
@using PoolScraper.Service.Consolidation
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IUptimeServiceClient UptimeServiceClient
@inject IScrapingServiceClient ScrapingServiceClient
@inject IUptimeConsolidateServiceClient UptimeConsolidateServiceClient;

<PageTitle>Uptime Info</PageTitle>

<h1>Uptime Report</h1>
<Modal @ref="modal" />

<p>Daily Uptime Statistics:</p>
<div>
    <DatePeriod OnSearch="@GetDetails" />
</div>

@if (workersUptime == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <span> Workers Count: </span> <span> @workersUptime.Count()  </span>
    <span> Today Coverage: </span> <span> @todayCoverage </span>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Algo</th>
                <th>Model</th>
                <th>Uptime%</th>
                <th>Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workerUptime in uptimePerWorker)
            {
                <tr>
                    <td>@workerUptime.Worker.Name</td>
                    <td>@workerUptime.Worker.Algorithm</td>
                    <td>@workerUptime.Worker.Model</td>
                    <td>@workerUptime.UptimePercentage</td>
                    <td><Button Color="ButtonColor.Primary" @onclick="() => GetWorkerDetails(workerUptime.WorkerId.Id)">@workerUptime.WorkerId</Button> </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Modal modal = default!;
    private IEnumerable<IUptimePercentageDetailedView> workersUptime = Enumerable.Empty<IUptimePercentageDetailedView>();
    private IEnumerable<IUptimePercentageDetailedView> uptimePerWorker = Enumerable.Empty<IUptimePercentageDetailedView>();


    private IEnumerable<IWorkerUptimeHistory> workerUptimeHistory = Enumerable.Empty<IWorkerUptimeHistory>();
    private double todayCoverage;
    private DateOnly selectedDate;
    private UptimeWorkersReport workersReport = new UptimeWorkersReport();

    protected override async Task OnInitializedAsync()
    {
        selectedDate = DateOnly.FromDateTime(DateTime.Now);
        await GetDetails(selectedDate.AsDateRange());
        todayCoverage = await ScrapingServiceClient.GetTodayCoverageAsync();
    }

    private async Task GetDetails(IDateRange dateRange)
    {
        
        var dailyUpTime = (await UptimeConsolidateServiceClient.GetDailyWorkerUptimeAsync(dateRange)).ToList();
        if (dailyUpTime.Count == 0)
        {
            workersUptime = Enumerable.Empty<IUptimePercentageDetailedView>();
            return;
        }
        uptimePerWorker   = workersReport.CalculateAveragePerWorker(dailyUpTime).OrderBy(w => w.UptimePercentage);
        
		StateHasChanged();
	}

    private async Task GetWorkerDetails(long id)
    {
        DateTime beginOfToday = selectedDate.ToDateTime(new TimeOnly(0, 0, 0));
        DateTime endOfToday = selectedDate.ToDateTime(new TimeOnly(23, 59, 59));

        var parameters = new Dictionary<string, object>();
        var uptimePeriods = await UptimeServiceClient.GetWorkerUptimeHistoryAsync(id, beginOfToday, endOfToday);
        parameters.Add("uptimePeriods", uptimePeriods);
        //parameters.Add("OnclickCallback", EventCallback.Factory.Create<IMovement>(this, UpdateMovement));

        await modal.ShowAsync<WorkerUptimeDetail>(title: "Movement Details", parameters: parameters);
    }

}
