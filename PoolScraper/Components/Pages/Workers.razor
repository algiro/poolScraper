@page "/workers"
@using System.Collections.ObjectModel
@using PoolScraper.Domain
@using PoolScraper.Model
@using PoolScraper.Model.PowerPool
@using PoolScraper.Model.Scheduler
@using PoolScraper.Service
@using PoolScraper.View
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IWorkersService WorkerService

<PageTitle>Scraping Info</PageTitle>

<h1>Scraping Report</h1>

<p>Latest scraping info:</p>

@if (workers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Algo</th>
                <th>Model</th>
                <th>Farm</th>
                <th>Id</th>
                <th>IsDisabled</th>
                <th>Toggle</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var worker in workers)
            {
                <tr>
                    <td>@worker.Name</td>
                    <td>@worker.Algorithm</td>
                    <td>@worker.Model</td>
                    <td>@worker.FarmId</td>
                    <td>@worker.WorkerId.Id</td>
                    <td>@worker.IsDisabled</td>
                    <td> <Button Color="ButtonColor.Primary" @onclick="() => ToggleStatusAsync(worker.WorkerId.AsWorkerId())">Toggle</Button> </td>
                </tr>
            }
        </tbody>
    </table>
    <Button Color="ButtonColor.Danger" @onclick="() => RemoveAllWorkersAsync()">Remove All</Button>
}

@code {
    private ObservableCollection<WorkerDTO> workers = default!;

    protected override async Task OnInitializedAsync()
    {
        workers = new ObservableCollection<WorkerDTO>(await WorkerService.GetWorkersAsync());
    }

    private async Task<bool> ToggleStatusAsync(IWorkerId workerId)
    {
        Console.Out.WriteLine($"ToggleStatusAsync on {workerId.PoolId}.{workerId.Id}");
        var status = await WorkerService.ToggleEnableWorkerAsync(workerId);
        if (status)
        {
            var worker = workers.Single(w => w.WorkerId.AsWorkerId().Equals(workerId));
            worker.IsDisabled = !worker.IsDisabled;
            Console.Out.WriteLine($"Worker {worker.Name} status changed to {worker.IsDisabled}");
        }
        return status;
    }

    private async Task<bool> RemoveAllWorkersAsync()
    {
        var status = await WorkerService.RemoveAllWorkerAsync();
        if (status)
        {
            workers.Clear();
            Console.Out.WriteLine($"All workers removed");
        }
        return status;
    }
}
