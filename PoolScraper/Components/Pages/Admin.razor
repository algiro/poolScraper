@page "/admin"
@using CommonUtils.Utils
@using PoolScraper.Components.Shared;
@using PoolScraper.Domain
@using PoolScraper.Domain.Consolidation
@using PoolScraper.Model
@using PoolScraper.Model.PowerPool
@using PoolScraper.Model.Scheduler
@using PoolScraper.Persistency.Consolidation
@using PoolScraper.Persistency.Utils
@using PoolScraper.Service
@using PoolScraper.Service.Consolidation
@using PoolScraper.View

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IUptimeConsolidateServiceClient ServiceClient
@inject IPowerPoolScrapingService PowerPoolScrapingService
@inject ISnapshotConsolidateServiceClient SnapshotConsolidateServiceClient
@inject IUptimeConsolidateServiceClient UptimeConsolidateServiceClient;
@inject ISnapshotDataConsolidationPersistency SnapDataConsolidationPersistency;
@inject IUptimeDataConsolidationPersistency UptimeDataConsolidationPersistency;
@inject IMongoUtils MongoUtils;
@inject IAdminService AdminService;


<PageTitle>Admin Page</PageTitle>
<Tabs>
    <Tab Title="Consolidation">
        <Content>
        <Tabs>
            <Tab Title="Snap Days" Active="true">
                    <Content>
                        <div class="col-12 col-sm-12">
                            <DatePeriod OnSearch="@GetDaySnaps" ActionText="Get Days" />
                        </div>
                        <div>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Snap Count</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                @foreach (var dailyCons in snapshotDailyConsolidation.OrderBy(u => u.DateRange.From))
                                {
                                    <tr>
                                        <td>@dailyCons.DateRange.From.ToString("d")</td>
                                        <td>@dailyCons.SnapshotCount</td>
                                        <td><Button Color="ButtonColor.Primary" @onclick="() => RemoveSnapDayConsolidation(dailyCons.DateRange)">Remove</Button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="col-12 col-sm-12">
                        <DatePeriod OnSearch="@ConsolidateDays" ActionText="Consolidate Days"/>                    
                    </div>
                    <div class=" ">
                        @if (isConsolidationExecuted) {
                            <label>Consolidation Result</label>
                            <label>Succesfull:</label> @consolidationDayResult.success
                            <label>Unprocessed dates</label> @consolidationDayResult.message
                        }
                    </div>
                </Content>
            </Tab>
            <Tab Title="Snap Hours" Active="true">
                <Content>
                    <div>
                            <DateSelection OnSearch="@ConsolidateSnapHours" ActionText="Consolidate" />                        
                    </div>
                </Content>
            </Tab>
            <Tab Title="Uptime Days" Active="true">
                <Content>
                        <div class="col-12 col-sm-12">
                            <DatePeriod OnSearch="@GetDayUptimes" ActionText="Get Days" />
                        </div>
                        <div>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Snap Count</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var dailyCons in uptimeDailyConsolidation.OrderBy(u => u.DateRange.From))
                                    {
                                        <tr>
                                            <td>@dailyCons.DateRange.From.ToString("d")</td>
                                            <td>@dailyCons.Count</td>
                                            <td><Button Color="ButtonColor.Primary" @onclick="() => RemoveUptimeDayConsolidation(dailyCons.DateRange)">Remove</Button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                    <div>
                        <DatePeriod OnSearch="@ConsolidateUpTimeDays" ActionText="Consolidate" />
                    </div>
                </Content>
            </Tab>
            <Tab Title="Uptime Hours" Active="true">
                <Content>
                    <div>
                        <DateSelection OnSearch="@ConsolidateUpTimeHours" ActionText="Consolidate" />                        
                    </div>
                </Content>
            </Tab>
        </Tabs>
        </Content>
    </Tab>
    <Tab Title="Snaps Data">
        <Content>
            <Tabs>
                <Tab title="Days">
                    <Content>
                        <DateSelection OnSearch="@GetHourSnaps" />
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>WorkerId</th>
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Hashrate</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var workerAlgoCount in snapshotHourlyStatus.OrderBy(u => u.DateRange.From))
                                {
                                    <tr>
                                        <td>@workerAlgoCount.WorkerId.Id</td>
                                        <td>@workerAlgoCount.DateRange.From</td>
                                        <td>@workerAlgoCount.DateRange.To</td>
                                        <td>@workerAlgoCount.BasicInfo.Hashrate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </Content>
                </Tab>
                <Tab title="Hours">
                <Content>
                    <DateSelection OnSearch="@GetHourSnaps" />
                    <table class="table">
                        <thead>
                            <tr>
                                <th>WorkerId</th>
                                <th>From</th>
                                <th>To</th>
                                <th>Hashrate</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var workerAlgoCount in snapshotHourlyStatus.OrderBy(u => u.DateRange.From))
                            {
                                <tr>
                                    <td>@workerAlgoCount.WorkerId.Id</td>
                                    <td>@workerAlgoCount.DateRange.From</td>
                                    <td>@workerAlgoCount.DateRange.To</td>
                                    <td>@workerAlgoCount.BasicInfo.Hashrate</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Content>
            </Tab>
            </Tabs>
        </Content>
    </Tab>
    <Tab Title="Database">
        <Content>
            <table class="table">
                <thead>
                    <tr>
                        <th>Collection Name</th>
                        <th>Action</th>
                        <th>Confirm</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var collectionName in MongoUtils.GetCollectionNames())
                    {
                        <tr>
                            <td>@collectionName</td>
                            <td>
                                <Button Color="ButtonColor.Primary" @onclick="() => RemoveCollection(collectionName)">Remove</Button>
                                <Button Color="ButtonColor.Primary" @onclick="() => GetCollectionInfo(collectionName)">GetInfo</Button>
                            </td>
                            <td> <TextInput TValue="string" @bind-Value="@collectionNameConfirmed" /> </td>
                        </tr>
                    }
                </tbody>
            </table>
			<TextAreaInput @bind-Value="@collectionInfo" Rows="10" ReadOnly="true" />
        </Content>
    </Tab>
    <Tab Title="Restore">
        <Content>
            <DatePeriod OnSearch="@RestoreFromScrapings" ActionText="Restore From Scrapings"/> 
        </Content>
    </Tab>

</Tabs>


@if (uptimePercentages == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>WorkerId</th>
                <th>From</th>
                <th>To</th>
                <th>Uptime%</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workerAlgoCount in uptimePercentages.OrderBy(u => u.DateRange.From))
            {
                <tr>
                    <td>@workerAlgoCount.WorkerId.Id</td>
                    <td>@workerAlgoCount.DateRange.From</td>
                    <td>@workerAlgoCount.DateRange.To</td>
                    <td>@workerAlgoCount.UptimePercentage</td>
                </tr>
            }
        </tbody>    
    </table>
    <div class="col-1 col-sm-1">
        <input type="text" id="descr" @bind-value="@workerId" />
    </div>
    <div class="col-1 col-sm-1">
        <Button Color="ButtonColor.Primary" @onclick="GetWorkerDayDetails">GetDetails</Button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>WorkerId</th>
                <th>From</th>
                <th>To</th>
                <th>Hashrate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workerAlgoCount in snapshotWorkerStatus.OrderBy(u => u.DateRange.From))
            {
                <tr>
                    <td>@workerAlgoCount.WorkerId.Id</td>
                    <td>@workerAlgoCount.DateRange.From</td>
                    <td>@workerAlgoCount.DateRange.To</td>
                    <td>@workerAlgoCount.BasicInfo.Hashrate</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<IUptimePercentage> uptimePercentages = Enumerable.Empty<IUptimePercentage>();
    private IEnumerable<ISnapshotWorkerStatus> snapshotWorkerStatus = Enumerable.Empty<ISnapshotWorkerStatus>();
    private IEnumerable<ISnapshotWorkerStatus> snapshotHourlyStatus = Enumerable.Empty<ISnapshotWorkerStatus>();
    private IEnumerable<ISnapshotDataConsolidationInfo> snapshotDailyConsolidation = Enumerable.Empty<ISnapshotDataConsolidationInfo>();
    private IEnumerable<IUptimeDataConsolidationInfo> uptimeDailyConsolidation = Enumerable.Empty<IUptimeDataConsolidationInfo>();
    private bool isConsolidationExecuted = false;

    private DateOnly selectedDate;
    private string? workerId;
    private (bool success, string? message) consolidationDayResult = (false, null);
    private string collectionNameConfirmed = string.Empty;
    private string collectionInfo = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        selectedDate = DateOnly.FromDateTime(DateTime.Now);
        uptimePercentages = await ServiceClient.GetHourlyUptimeAsync(selectedDate);
        snapshotHourlyStatus = await SnapshotConsolidateServiceClient.GetHourlySnapshotAsync(selectedDate.AsDateRange());
    }

    private async Task GetHourSnaps(DateOnly date)
    {
        selectedDate = date;
        uptimePercentages = await ServiceClient.GetHourlyUptimeAsync(selectedDate);
        snapshotHourlyStatus = await SnapshotConsolidateServiceClient.GetHourlySnapshotAsync(selectedDate.AsDateRange());
    }
    private async Task GetDaySnaps(IDateRange dateRange)
    {
        var dataConsolidationInfo = await SnapDataConsolidationPersistency.GetSnapshotDataConsolidationInfoAsync(dateRange);
        snapshotDailyConsolidation = dataConsolidationInfo.Where(d => d.Granularity == Granularity.Days).ToList();
    }
    private async Task GetDayUptimes(IDateRange dateRange)
    {
        var dataConsolidationInfo = await UptimeDataConsolidationPersistency.GetUptimeDataConsolidationInfoAsync(dateRange);
        uptimeDailyConsolidation = dataConsolidationInfo.Where(d => d.Granularity == Granularity.Days).ToList();
    }
    private IDateRange? dateRange;
    private void ConfirmRange(IDateRange dateRange)
    {
        this.dateRange = dateRange;
    }

    private async Task GetWorkerDayDetails()
    {
        if (workerId != null)
        {
            var dateFrom = selectedDate.GetBeginOfDay();
            var dateTo = selectedDate.GetEndOfDay();
            snapshotWorkerStatus = await PowerPoolScrapingService.GetSnapshotWorkerStatusAsync(long.Parse(workerId), dateFrom, dateTo);
        }
    }
    private async Task ConsolidateSnapHours(DateOnly date)
    {
        await SnapshotConsolidateServiceClient.ConsolidateHours(date);
    }

    private async Task ConsolidateUpTimeHours(DateOnly date)
    {
        await UptimeConsolidateServiceClient.ConsolidateHours(date);
    }

    private async Task ConsolidateUpTimeDays(IDateRange dateRange)
    {
        await UptimeConsolidateServiceClient.ConsolidateDays(dateRange);
    }

    private async Task ConsolidateDays(IDateRange dateRange)
    {
        if (dateRange != null)
        {
            consolidationDayResult = await SnapshotConsolidateServiceClient.ConsolidateDateRange(dateRange);
            isConsolidationExecuted = true;
        }
    }

    private async Task<bool> RemoveSnapDayConsolidation(IDateRange dateRange)
    {
        if (dateRange != null)
        {
            var result = await SnapshotConsolidateServiceClient.RemoveDayConsolidationAsync(dateRange);
            return result.isSuccesfull;
        }
        return false;
    }
    private async Task<bool> RemoveUptimeDayConsolidation(IDateRange dateRange)
    {
        if (dateRange != null)
        {
            var result = await UptimeConsolidateServiceClient.RemoveDayConsolidationAsync(dateRange);
            return result.isSuccesfull;
        }
        return false;
    }

    private void RemoveCollection(string collectionName)
    {
        if (collectionNameConfirmed == collectionName)
        {
            MongoUtils.RemoveCollection(collectionName);
            collectionNameConfirmed = string.Empty;
        }
    }

    private void GetCollectionInfo(string collectionName)
    {
        collectionInfo = MongoUtils.GetCollectionStructure(collectionName);
    }

    private async Task RestoreFromScrapings(IDateRange dateRange)
    {
        await AdminService.RestoreCollectionsFromScraping(dateRange);
	}

}
